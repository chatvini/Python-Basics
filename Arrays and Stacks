{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "cd2335c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = 3 \n",
    "b = 5\n",
    "c = a + b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5587fa29",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8\n"
     ]
    }
   ],
   "source": [
    "print(c)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36e6a96d",
   "metadata": {},
   "source": [
    "# Array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1c12480b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Array \n",
    "#append insert delete\n",
    "\n",
    "#importing \"array\" for array operations\n",
    "import array\n",
    "import pandas \n",
    "import numpy\n",
    "\n",
    "\n",
    "#initialize an array\n",
    "\n",
    "arr = array.array('i',[345, 546, 747])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "be03af4b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The new created array is: 345 546 747 "
     ]
    }
   ],
   "source": [
    "#Print original \n",
    "print (\"The new created array is:\", end = \" \")\n",
    "for i in range (0, 3):### Expanded as: 0,1(if end value of the range is 2); 0,1,2(if end value pf range is 3)\n",
    "    print(arr[i], end=\" \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c4a6b994",
   "metadata": {},
   "outputs": [],
   "source": [
    "#append a new data element\n",
    "arr.append(976)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "0f2d5dbb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The new created array is: 345 546 1900 "
     ]
    }
   ],
   "source": [
    "#Print new array\n",
    "print (\"The new created array is:\", end = \" \")\n",
    "for i in range (0, 3):  ### Expanded as: 0,1(if end value of the range is 2); 0,1,2(if end value pf range is 3)\n",
    "    print(arr[i], end=\" \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2c818399",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The new created array is: 345 546 1900 747 "
     ]
    }
   ],
   "source": [
    "#Print new array\n",
    "print (\"The new created array is:\", end = \" \")\n",
    "for i in range (0, 4):  ### Expanded as: 0,1(if end value of the range is 2); 0,1,2,3 (if end value of range is 4)\n",
    "    print(arr[i], end=\" \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "021878af",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Insert a new data element at second position\n",
    "arr.insert(2,1900)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "576ccd38",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The new created array is: 345 546 1900 747 976 "
     ]
    }
   ],
   "source": [
    "#Print new array\n",
    "print (\"The new created array is:\", end = \" \")\n",
    "for i in range (0, 5):  ### Expanded as: 0,1(if end value of the range is 2); 0,1,2(if end value pf range is 3)\n",
    "    print(arr[i], end=\" \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b91cd16d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The new created array is: 1900 747 "
     ]
    }
   ],
   "source": [
    "#Print new array\n",
    "print (\"The new created array is:\", end = \" \")\n",
    "for i in range (2, 4):  ### Expanded as: 0,1(if end value of the range is 2); 0,1,2(if end value pf range is 3)\n",
    "    print(arr[i], end=\" \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "383a286e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Pop and remove\n",
    "arr = array.array('i', [3,27, 4, 9, 0])\n",
    "arr.remove(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "5e6bd993",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The new created array is: 27 4 9 0 "
     ]
    }
   ],
   "source": [
    "#Print new array\n",
    "print (\"The new created array is:\", end = \" \")\n",
    "for i in range (0, 4):  ### Expanded as: 0,1(if end value of the range is 2); 0,1,2(if end value pf range is 3)\n",
    "    print(arr[i], end=\" \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "f4ea6003",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n"
     ]
    }
   ],
   "source": [
    "print(arr[2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c7ca8d5d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The new created array is: 27 4 9 0 "
     ]
    }
   ],
   "source": [
    "print (\"The new created array is:\", end = \" \")\n",
    "for i in range (0, 4):\n",
    "    print(arr[i], end=\" \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9892d0ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "def remove(array, element):\n",
    "    return array.remove(element)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ecc81bdb",
   "metadata": {},
   "source": [
    "# Stack"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "f2ce28df",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Create an empty stack\n",
    "def create_stack():\n",
    "    stack = []\n",
    "    return stack\n",
    "\n",
    "# Add data items to stack\n",
    "def push(stack, item):\n",
    "    stack.append(item)\n",
    "    print(\"pushed item:\", item)\n",
    "    \n",
    "# Remove data items to stack\n",
    "def pop(stack):\n",
    "    return stack.pop()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "f701c00b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pushed item: 1\n",
      "pushed item: 2\n",
      "pushed item: 3\n",
      "pushed item: 4\n",
      "pushed item: 5\n",
      "pushed item: 6\n"
     ]
    }
   ],
   "source": [
    "stack_new = create_stack()\n",
    "push(stack_new,str(1))\n",
    "push(stack_new,str(2))\n",
    "push(stack_new,str(3))\n",
    "push(stack_new,str(4))\n",
    "push(stack_new,str(5))\n",
    "push(stack_new,str(6))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "f708a1fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Popped data element:  6\n",
      "Stack after popping an element:  ['1', '2', '3', '4', '5']\n"
     ]
    }
   ],
   "source": [
    "print(\"Popped data element: \", pop(stack_new))\n",
    "print(\"Stack after popping an element: \", str(stack_new))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "f1e7e405",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Popped data element:  5\n",
      "Stack after popping an element:  ['1', '2', '3', '4']\n"
     ]
    }
   ],
   "source": [
    "print(\"Popped data element: \", pop(stack_new))\n",
    "print(\"Stack after popping an element: \", str(stack_new))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "266bc1f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "## END ##"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
